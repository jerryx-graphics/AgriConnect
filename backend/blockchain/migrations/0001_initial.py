# Generated by Django 4.2.23 on 2025-10-27 19:20

from decimal import Decimal
from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("orders", "0002_initial"),
        ("products", "0002_initial"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="BlockchainNetwork",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("is_deleted", models.BooleanField(default=False)),
                ("deleted_at", models.DateTimeField(blank=True, null=True)),
                (
                    "name",
                    models.CharField(
                        choices=[
                            ("ethereum", "Ethereum"),
                            ("polygon", "Polygon"),
                            ("bsc", "Binance Smart Chain"),
                            ("avalanche", "Avalanche"),
                            ("arbitrum", "Arbitrum"),
                        ],
                        max_length=50,
                        unique=True,
                    ),
                ),
                ("chain_id", models.PositiveIntegerField(unique=True)),
                ("rpc_url", models.URLField()),
                ("explorer_url", models.URLField()),
                ("native_currency", models.CharField(default="ETH", max_length=10)),
                ("is_testnet", models.BooleanField(default=False)),
                ("is_active", models.BooleanField(default=True)),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="BlockchainTransaction",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("is_deleted", models.BooleanField(default=False)),
                ("deleted_at", models.DateTimeField(blank=True, null=True)),
                (
                    "tx_hash",
                    models.CharField(blank=True, max_length=66, null=True, unique=True),
                ),
                ("block_number", models.PositiveIntegerField(blank=True, null=True)),
                ("block_hash", models.CharField(blank=True, max_length=66, null=True)),
                (
                    "transaction_index",
                    models.PositiveIntegerField(blank=True, null=True),
                ),
                (
                    "transaction_type",
                    models.CharField(
                        choices=[
                            ("product_registration", "Product Registration"),
                            ("ownership_transfer", "Ownership Transfer"),
                            ("quality_update", "Quality Update"),
                            ("payment_escrow", "Payment Escrow"),
                            ("payment_release", "Payment Release"),
                            ("certification", "Certification"),
                            ("batch_creation", "Batch Creation"),
                        ],
                        max_length=20,
                    ),
                ),
                ("from_address", models.CharField(max_length=42)),
                ("to_address", models.CharField(max_length=42)),
                (
                    "value",
                    models.DecimalField(
                        decimal_places=18, default=Decimal("0"), max_digits=30
                    ),
                ),
                (
                    "gas_price",
                    models.DecimalField(
                        blank=True, decimal_places=18, max_digits=30, null=True
                    ),
                ),
                ("gas_used", models.PositiveIntegerField(blank=True, null=True)),
                ("gas_limit", models.PositiveIntegerField(blank=True, null=True)),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("pending", "Pending"),
                            ("submitted", "Submitted"),
                            ("confirmed", "Confirmed"),
                            ("failed", "Failed"),
                            ("reverted", "Reverted"),
                        ],
                        default="pending",
                        max_length=10,
                    ),
                ),
                ("nonce", models.PositiveIntegerField(blank=True, null=True)),
                ("confirmation_count", models.PositiveIntegerField(default=0)),
                ("input_data", models.TextField(blank=True, null=True)),
                (
                    "function_name",
                    models.CharField(blank=True, max_length=100, null=True),
                ),
                ("function_params", models.JSONField(default=dict)),
                ("error_message", models.TextField(blank=True, null=True)),
                ("retry_count", models.PositiveIntegerField(default=0)),
                ("max_retries", models.PositiveIntegerField(default=3)),
            ],
            options={
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="ProductBatch",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("is_deleted", models.BooleanField(default=False)),
                ("deleted_at", models.DateTimeField(blank=True, null=True)),
                (
                    "batch_id",
                    models.UUIDField(default=uuid.uuid4, editable=False, unique=True),
                ),
                (
                    "quantity",
                    models.DecimalField(
                        decimal_places=2,
                        max_digits=10,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0.01"))
                        ],
                    ),
                ),
                (
                    "unit",
                    models.CharField(
                        choices=[
                            ("kg", "Kilogram"),
                            ("ton", "Ton"),
                            ("piece", "Piece"),
                            ("bag", "Bag"),
                            ("crate", "Crate"),
                        ],
                        max_length=20,
                    ),
                ),
                ("harvest_date", models.DateField()),
                ("expiry_date", models.DateField(blank=True, null=True)),
                ("farm_location", models.CharField(max_length=200)),
                (
                    "farm_coordinates",
                    models.JSONField(default=dict, help_text="Latitude and longitude"),
                ),
                (
                    "blockchain_id",
                    models.CharField(
                        blank=True,
                        help_text="Unique ID on blockchain",
                        max_length=100,
                        null=True,
                    ),
                ),
                (
                    "merkle_root",
                    models.CharField(
                        blank=True,
                        help_text="Merkle root for batch verification",
                        max_length=66,
                        null=True,
                    ),
                ),
                (
                    "quality_grade",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("A+", "Premium Grade"),
                            ("A", "Grade A"),
                            ("B", "Grade B"),
                            ("C", "Grade C"),
                        ],
                        max_length=2,
                        null=True,
                    ),
                ),
                ("organic_certified", models.BooleanField(default=False)),
                (
                    "certifications",
                    models.JSONField(default=list, help_text="List of certifications"),
                ),
                ("is_available", models.BooleanField(default=True)),
                ("is_sold", models.BooleanField(default=False)),
                (
                    "remaining_quantity",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=10, null=True
                    ),
                ),
                (
                    "blockchain_tx",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="product_batches",
                        to="blockchain.blockchaintransaction",
                    ),
                ),
                (
                    "farmer",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="produced_batches",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "product",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="batches",
                        to="products.product",
                    ),
                ),
            ],
            options={
                "ordering": ["-harvest_date"],
            },
        ),
        migrations.CreateModel(
            name="SupplyChainEvent",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("is_deleted", models.BooleanField(default=False)),
                ("deleted_at", models.DateTimeField(blank=True, null=True)),
                (
                    "event_type",
                    models.CharField(
                        choices=[
                            ("harvest", "Harvest"),
                            ("processing", "Processing"),
                            ("packaging", "Packaging"),
                            ("quality_check", "Quality Check"),
                            ("storage", "Storage"),
                            ("transport_start", "Transport Started"),
                            ("transport_end", "Transport Completed"),
                            ("delivery", "Delivery"),
                            ("sale", "Sale"),
                        ],
                        max_length=20,
                    ),
                ),
                ("timestamp", models.DateTimeField()),
                ("location", models.CharField(max_length=200)),
                ("coordinates", models.JSONField(blank=True, default=dict, null=True)),
                ("description", models.TextField()),
                (
                    "metadata",
                    models.JSONField(default=dict, help_text="Additional event data"),
                ),
                ("is_verified", models.BooleanField(default=False)),
                (
                    "verification_hash",
                    models.CharField(blank=True, max_length=66, null=True),
                ),
                (
                    "temperature",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=5, null=True
                    ),
                ),
                (
                    "humidity",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=5, null=True
                    ),
                ),
                (
                    "quality_score",
                    models.IntegerField(
                        blank=True,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(100),
                        ],
                    ),
                ),
                (
                    "actor",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="supply_chain_events",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "batch",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="supply_chain_events",
                        to="blockchain.productbatch",
                    ),
                ),
                (
                    "blockchain_tx",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="blockchain.blockchaintransaction",
                    ),
                ),
            ],
            options={
                "ordering": ["timestamp"],
            },
        ),
        migrations.CreateModel(
            name="SmartContract",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("is_deleted", models.BooleanField(default=False)),
                ("deleted_at", models.DateTimeField(blank=True, null=True)),
                (
                    "contract_type",
                    models.CharField(
                        choices=[
                            ("supply_chain", "Supply Chain Tracking"),
                            ("payment_escrow", "Payment Escrow"),
                            ("quality_certificate", "Quality Certificate"),
                            ("farmer_registry", "Farmer Registry"),
                            ("marketplace", "Marketplace"),
                        ],
                        max_length=20,
                    ),
                ),
                ("name", models.CharField(max_length=100)),
                (
                    "address",
                    models.CharField(
                        help_text="Contract address on blockchain", max_length=42
                    ),
                ),
                (
                    "abi",
                    models.JSONField(
                        help_text="Contract ABI (Application Binary Interface)"
                    ),
                ),
                (
                    "bytecode",
                    models.TextField(
                        blank=True, help_text="Contract bytecode", null=True
                    ),
                ),
                (
                    "deployment_tx_hash",
                    models.CharField(blank=True, max_length=66, null=True),
                ),
                (
                    "deployment_block",
                    models.PositiveIntegerField(blank=True, null=True),
                ),
                (
                    "deployer_address",
                    models.CharField(blank=True, max_length=42, null=True),
                ),
                ("version", models.CharField(default="1.0.0", max_length=20)),
                ("description", models.TextField(blank=True, null=True)),
                ("is_verified", models.BooleanField(default=False)),
                ("is_active", models.BooleanField(default=True)),
                (
                    "network",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="contracts",
                        to="blockchain.blockchainnetwork",
                    ),
                ),
            ],
            options={
                "unique_together": {("network", "contract_type", "version")},
            },
        ),
        migrations.CreateModel(
            name="QualityCertificate",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("is_deleted", models.BooleanField(default=False)),
                ("deleted_at", models.DateTimeField(blank=True, null=True)),
                (
                    "certificate_id",
                    models.UUIDField(default=uuid.uuid4, editable=False, unique=True),
                ),
                (
                    "certificate_type",
                    models.CharField(
                        choices=[
                            ("organic", "Organic Certification"),
                            ("fair_trade", "Fair Trade"),
                            ("global_gap", "GlobalGAP"),
                            ("haccp", "HACCP"),
                            ("iso_22000", "ISO 22000"),
                            ("kenya_organic", "Kenya Organic"),
                            ("custom", "Custom Certification"),
                        ],
                        max_length=20,
                    ),
                ),
                (
                    "issuer",
                    models.CharField(
                        help_text="Certifying organization", max_length=200
                    ),
                ),
                (
                    "issuer_address",
                    models.CharField(
                        blank=True,
                        help_text="Blockchain address of issuer",
                        max_length=42,
                        null=True,
                    ),
                ),
                ("certificate_number", models.CharField(max_length=100, unique=True)),
                ("issue_date", models.DateField()),
                ("expiry_date", models.DateField()),
                ("is_valid", models.BooleanField(default=True)),
                (
                    "ipfs_hash",
                    models.CharField(
                        blank=True,
                        help_text="IPFS hash for certificate document",
                        max_length=100,
                        null=True,
                    ),
                ),
                (
                    "certificate_hash",
                    models.CharField(
                        help_text="Hash of certificate for verification", max_length=66
                    ),
                ),
                (
                    "certificate_data",
                    models.JSONField(
                        default=dict, help_text="Certificate details and standards met"
                    ),
                ),
                (
                    "batch",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="certificates",
                        to="blockchain.productbatch",
                    ),
                ),
                (
                    "blockchain_tx",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="blockchain.blockchaintransaction",
                    ),
                ),
            ],
            options={
                "ordering": ["-issue_date"],
            },
        ),
        migrations.AddField(
            model_name="blockchaintransaction",
            name="contract",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="transactions",
                to="blockchain.smartcontract",
            ),
        ),
        migrations.AddField(
            model_name="blockchaintransaction",
            name="order",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="blockchain_transactions",
                to="orders.order",
            ),
        ),
        migrations.AddField(
            model_name="blockchaintransaction",
            name="product",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="blockchain_transactions",
                to="products.product",
            ),
        ),
        migrations.AddField(
            model_name="blockchaintransaction",
            name="user",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="blockchain_transactions",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.CreateModel(
            name="BlockchainWallet",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("is_deleted", models.BooleanField(default=False)),
                ("deleted_at", models.DateTimeField(blank=True, null=True)),
                ("address", models.CharField(max_length=42, unique=True)),
                ("public_key", models.CharField(blank=True, max_length=130, null=True)),
                (
                    "wallet_type",
                    models.CharField(
                        choices=[
                            ("metamask", "MetaMask"),
                            ("walletconnect", "WalletConnect"),
                            ("generated", "Platform Generated"),
                            ("imported", "Imported"),
                        ],
                        default="generated",
                        max_length=20,
                    ),
                ),
                ("is_verified", models.BooleanField(default=False)),
                (
                    "verification_message",
                    models.CharField(blank=True, max_length=200, null=True),
                ),
                (
                    "verification_signature",
                    models.CharField(blank=True, max_length=132, null=True),
                ),
                ("last_activity", models.DateTimeField(blank=True, null=True)),
                ("transaction_count", models.PositiveIntegerField(default=0)),
                (
                    "total_gas_used",
                    models.DecimalField(
                        decimal_places=18, default=Decimal("0"), max_digits=30
                    ),
                ),
                (
                    "user",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="blockchain_wallet",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "indexes": [
                    models.Index(
                        fields=["address"], name="blockchain__address_a9e6c0_idx"
                    ),
                    models.Index(
                        fields=["user", "is_verified"],
                        name="blockchain__user_id_da5e1e_idx",
                    ),
                ],
            },
        ),
        migrations.AddIndex(
            model_name="blockchaintransaction",
            index=models.Index(
                fields=["tx_hash"], name="blockchain__tx_hash_7a315c_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="blockchaintransaction",
            index=models.Index(
                fields=["status", "created_at"], name="blockchain__status_f353af_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="blockchaintransaction",
            index=models.Index(
                fields=["user", "transaction_type"],
                name="blockchain__user_id_2a074c_idx",
            ),
        ),
    ]
